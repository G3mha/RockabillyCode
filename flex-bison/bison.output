Terminals which are not used

   COMP_END


State 0 conflicts: 4 shift/reduce
State 33 conflicts: 4 shift/reduce
State 34 conflicts: 4 shift/reduce
State 68 conflicts: 4 shift/reduce


Grammar

    0 $accept: block $end

    1 block: /* empty */
    2      | statement
    3      | block statement

    4 statement: print NEWLINE
    5          | declaration NEWLINE
    6          | while NEWLINE
    7          | if NEWLINE

    8 print: PRINT bool_exp

    9 declaration: IDENTIFIER DECLARATOR bool_exp

   10 while: WHILE_CONDITION bool_exp WHILE_STATEMENTS NEWLINE block WHILE_END

   11 if: IF_CONDITION bool_exp IF_STATEMENTS NEWLINE block optional_else IF_END

   12 optional_else: /* empty */
   13              | ELSE NEWLINE block

   14 bool_exp: OR_INIT bool_term OR_END
   15         | bool_exp OR bool_term

   16 bool_term: AND_INIT rel_exp AND_END
   17          | bool_term AND rel_exp

   18 rel_exp: COMP_INIT expression
   19        | rel_exp rel_op expression

   20 rel_op: COMP_EQUAL
   21       | COMP_MORE
   22       | COMP_LESS

   23 expression: term
   24           | expression expr_op term

   25 expr_op: SUM
   26        | SUBTRACT

   27 term: factor
   28     | term term_op factor

   29 term_op: MULTIPLY
   30        | DIVIDE

   31 factor: sequence
   32       | IDENTIFIER
   33       | factor_op factor
   34       | INPUT

   35 factor_op: PLUS
   36          | MINUS
   37          | NOT

   38 sequence: NUMBER
   39         | sequence NUMBER


Terminals, with rules where they appear

$end (0) 0
error (256)
NUMBER (258) 38 39
IDENTIFIER (259) 9 32
DECLARATOR (260) 9
PRINT (261) 8
WHILE_CONDITION (262) 10
WHILE_STATEMENTS (263) 10
WHILE_END (264) 10
IF_CONDITION (265) 11
IF_STATEMENTS (266) 11
ELSE (267) 13
IF_END (268) 11
OR_INIT (269) 14
OR (270) 15
OR_END (271) 14
AND_INIT (272) 16
AND (273) 17
AND_END (274) 16
COMP_INIT (275) 18
COMP_EQUAL (276) 20
COMP_MORE (277) 21
COMP_LESS (278) 22
COMP_END (279)
SUM (280) 25
SUBTRACT (281) 26
MULTIPLY (282) 29
DIVIDE (283) 30
PLUS (284) 35
MINUS (285) 36
NOT (286) 37
INPUT (287) 34
NEWLINE (288) 4 5 6 7 10 11 13


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
block (35)
    on left: 1 2 3, on right: 0 3 10 11 13
statement (36)
    on left: 4 5 6 7, on right: 2 3
print (37)
    on left: 8, on right: 4
declaration (38)
    on left: 9, on right: 5
while (39)
    on left: 10, on right: 6
if (40)
    on left: 11, on right: 7
optional_else (41)
    on left: 12 13, on right: 11
bool_exp (42)
    on left: 14 15, on right: 8 9 10 11 15
bool_term (43)
    on left: 16 17, on right: 14 15 17
rel_exp (44)
    on left: 18 19, on right: 16 17 19
rel_op (45)
    on left: 20 21 22, on right: 19
expression (46)
    on left: 23 24, on right: 18 19 24
expr_op (47)
    on left: 25 26, on right: 24
term (48)
    on left: 27 28, on right: 23 24 28
term_op (49)
    on left: 29 30, on right: 28
factor (50)
    on left: 31 32 33 34, on right: 27 28 33
factor_op (51)
    on left: 35 36 37, on right: 33
sequence (52)
    on left: 38 39, on right: 31 39


state 0

    0 $accept: . block $end

    IDENTIFIER       shift, and go to state 1
    PRINT            shift, and go to state 2
    WHILE_CONDITION  shift, and go to state 3
    IF_CONDITION     shift, and go to state 4

    IDENTIFIER       [reduce using rule 1 (block)]
    PRINT            [reduce using rule 1 (block)]
    WHILE_CONDITION  [reduce using rule 1 (block)]
    IF_CONDITION     [reduce using rule 1 (block)]
    $default         reduce using rule 1 (block)

    block        go to state 5
    statement    go to state 6
    print        go to state 7
    declaration  go to state 8
    while        go to state 9
    if           go to state 10


state 1

    9 declaration: IDENTIFIER . DECLARATOR bool_exp

    DECLARATOR  shift, and go to state 11


state 2

    8 print: PRINT . bool_exp

    OR_INIT  shift, and go to state 12

    bool_exp  go to state 13


state 3

   10 while: WHILE_CONDITION . bool_exp WHILE_STATEMENTS NEWLINE block WHILE_END

    OR_INIT  shift, and go to state 12

    bool_exp  go to state 14


state 4

   11 if: IF_CONDITION . bool_exp IF_STATEMENTS NEWLINE block optional_else IF_END

    OR_INIT  shift, and go to state 12

    bool_exp  go to state 15


state 5

    0 $accept: block . $end
    3 block: block . statement

    $end             shift, and go to state 16
    IDENTIFIER       shift, and go to state 1
    PRINT            shift, and go to state 2
    WHILE_CONDITION  shift, and go to state 3
    IF_CONDITION     shift, and go to state 4

    statement    go to state 17
    print        go to state 7
    declaration  go to state 8
    while        go to state 9
    if           go to state 10


state 6

    2 block: statement .

    $default  reduce using rule 2 (block)


state 7

    4 statement: print . NEWLINE

    NEWLINE  shift, and go to state 18


state 8

    5 statement: declaration . NEWLINE

    NEWLINE  shift, and go to state 19


state 9

    6 statement: while . NEWLINE

    NEWLINE  shift, and go to state 20


state 10

    7 statement: if . NEWLINE

    NEWLINE  shift, and go to state 21


state 11

    9 declaration: IDENTIFIER DECLARATOR . bool_exp

    OR_INIT  shift, and go to state 12

    bool_exp  go to state 22


state 12

   14 bool_exp: OR_INIT . bool_term OR_END

    AND_INIT  shift, and go to state 23

    bool_term  go to state 24


state 13

    8 print: PRINT bool_exp .
   15 bool_exp: bool_exp . OR bool_term

    OR  shift, and go to state 25

    $default  reduce using rule 8 (print)


state 14

   10 while: WHILE_CONDITION bool_exp . WHILE_STATEMENTS NEWLINE block WHILE_END
   15 bool_exp: bool_exp . OR bool_term

    WHILE_STATEMENTS  shift, and go to state 26
    OR                shift, and go to state 25


state 15

   11 if: IF_CONDITION bool_exp . IF_STATEMENTS NEWLINE block optional_else IF_END
   15 bool_exp: bool_exp . OR bool_term

    IF_STATEMENTS  shift, and go to state 27
    OR             shift, and go to state 25


state 16

    0 $accept: block $end .

    $default  accept


state 17

    3 block: block statement .

    $default  reduce using rule 3 (block)


state 18

    4 statement: print NEWLINE .

    $default  reduce using rule 4 (statement)


state 19

    5 statement: declaration NEWLINE .

    $default  reduce using rule 5 (statement)


state 20

    6 statement: while NEWLINE .

    $default  reduce using rule 6 (statement)


state 21

    7 statement: if NEWLINE .

    $default  reduce using rule 7 (statement)


state 22

    9 declaration: IDENTIFIER DECLARATOR bool_exp .
   15 bool_exp: bool_exp . OR bool_term

    OR  shift, and go to state 25

    $default  reduce using rule 9 (declaration)


state 23

   16 bool_term: AND_INIT . rel_exp AND_END

    COMP_INIT  shift, and go to state 28

    rel_exp  go to state 29


state 24

   14 bool_exp: OR_INIT bool_term . OR_END
   17 bool_term: bool_term . AND rel_exp

    OR_END  shift, and go to state 30
    AND     shift, and go to state 31


state 25

   15 bool_exp: bool_exp OR . bool_term

    AND_INIT  shift, and go to state 23

    bool_term  go to state 32


state 26

   10 while: WHILE_CONDITION bool_exp WHILE_STATEMENTS . NEWLINE block WHILE_END

    NEWLINE  shift, and go to state 33


state 27

   11 if: IF_CONDITION bool_exp IF_STATEMENTS . NEWLINE block optional_else IF_END

    NEWLINE  shift, and go to state 34


state 28

   18 rel_exp: COMP_INIT . expression

    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    PLUS        shift, and go to state 37
    MINUS       shift, and go to state 38
    NOT         shift, and go to state 39
    INPUT       shift, and go to state 40

    expression  go to state 41
    term        go to state 42
    factor      go to state 43
    factor_op   go to state 44
    sequence    go to state 45


state 29

   16 bool_term: AND_INIT rel_exp . AND_END
   19 rel_exp: rel_exp . rel_op expression

    AND_END     shift, and go to state 46
    COMP_EQUAL  shift, and go to state 47
    COMP_MORE   shift, and go to state 48
    COMP_LESS   shift, and go to state 49

    rel_op  go to state 50


state 30

   14 bool_exp: OR_INIT bool_term OR_END .

    $default  reduce using rule 14 (bool_exp)


state 31

   17 bool_term: bool_term AND . rel_exp

    COMP_INIT  shift, and go to state 28

    rel_exp  go to state 51


state 32

   15 bool_exp: bool_exp OR bool_term .
   17 bool_term: bool_term . AND rel_exp

    AND  shift, and go to state 31

    $default  reduce using rule 15 (bool_exp)


state 33

   10 while: WHILE_CONDITION bool_exp WHILE_STATEMENTS NEWLINE . block WHILE_END

    IDENTIFIER       shift, and go to state 1
    PRINT            shift, and go to state 2
    WHILE_CONDITION  shift, and go to state 3
    IF_CONDITION     shift, and go to state 4

    IDENTIFIER       [reduce using rule 1 (block)]
    PRINT            [reduce using rule 1 (block)]
    WHILE_CONDITION  [reduce using rule 1 (block)]
    IF_CONDITION     [reduce using rule 1 (block)]
    $default         reduce using rule 1 (block)

    block        go to state 52
    statement    go to state 6
    print        go to state 7
    declaration  go to state 8
    while        go to state 9
    if           go to state 10


state 34

   11 if: IF_CONDITION bool_exp IF_STATEMENTS NEWLINE . block optional_else IF_END

    IDENTIFIER       shift, and go to state 1
    PRINT            shift, and go to state 2
    WHILE_CONDITION  shift, and go to state 3
    IF_CONDITION     shift, and go to state 4

    IDENTIFIER       [reduce using rule 1 (block)]
    PRINT            [reduce using rule 1 (block)]
    WHILE_CONDITION  [reduce using rule 1 (block)]
    IF_CONDITION     [reduce using rule 1 (block)]
    $default         reduce using rule 1 (block)

    block        go to state 53
    statement    go to state 6
    print        go to state 7
    declaration  go to state 8
    while        go to state 9
    if           go to state 10


state 35

   38 sequence: NUMBER .

    $default  reduce using rule 38 (sequence)


state 36

   32 factor: IDENTIFIER .

    $default  reduce using rule 32 (factor)


state 37

   35 factor_op: PLUS .

    $default  reduce using rule 35 (factor_op)


state 38

   36 factor_op: MINUS .

    $default  reduce using rule 36 (factor_op)


state 39

   37 factor_op: NOT .

    $default  reduce using rule 37 (factor_op)


state 40

   34 factor: INPUT .

    $default  reduce using rule 34 (factor)


state 41

   18 rel_exp: COMP_INIT expression .
   24 expression: expression . expr_op term

    SUM       shift, and go to state 54
    SUBTRACT  shift, and go to state 55

    $default  reduce using rule 18 (rel_exp)

    expr_op  go to state 56


state 42

   23 expression: term .
   28 term: term . term_op factor

    MULTIPLY  shift, and go to state 57
    DIVIDE    shift, and go to state 58

    $default  reduce using rule 23 (expression)

    term_op  go to state 59


state 43

   27 term: factor .

    $default  reduce using rule 27 (term)


state 44

   33 factor: factor_op . factor

    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    PLUS        shift, and go to state 37
    MINUS       shift, and go to state 38
    NOT         shift, and go to state 39
    INPUT       shift, and go to state 40

    factor     go to state 60
    factor_op  go to state 44
    sequence   go to state 45


state 45

   31 factor: sequence .
   39 sequence: sequence . NUMBER

    NUMBER  shift, and go to state 61

    $default  reduce using rule 31 (factor)


state 46

   16 bool_term: AND_INIT rel_exp AND_END .

    $default  reduce using rule 16 (bool_term)


state 47

   20 rel_op: COMP_EQUAL .

    $default  reduce using rule 20 (rel_op)


state 48

   21 rel_op: COMP_MORE .

    $default  reduce using rule 21 (rel_op)


state 49

   22 rel_op: COMP_LESS .

    $default  reduce using rule 22 (rel_op)


state 50

   19 rel_exp: rel_exp rel_op . expression

    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    PLUS        shift, and go to state 37
    MINUS       shift, and go to state 38
    NOT         shift, and go to state 39
    INPUT       shift, and go to state 40

    expression  go to state 62
    term        go to state 42
    factor      go to state 43
    factor_op   go to state 44
    sequence    go to state 45


state 51

   17 bool_term: bool_term AND rel_exp .
   19 rel_exp: rel_exp . rel_op expression

    COMP_EQUAL  shift, and go to state 47
    COMP_MORE   shift, and go to state 48
    COMP_LESS   shift, and go to state 49

    $default  reduce using rule 17 (bool_term)

    rel_op  go to state 50


state 52

    3 block: block . statement
   10 while: WHILE_CONDITION bool_exp WHILE_STATEMENTS NEWLINE block . WHILE_END

    IDENTIFIER       shift, and go to state 1
    PRINT            shift, and go to state 2
    WHILE_CONDITION  shift, and go to state 3
    WHILE_END        shift, and go to state 63
    IF_CONDITION     shift, and go to state 4

    statement    go to state 17
    print        go to state 7
    declaration  go to state 8
    while        go to state 9
    if           go to state 10


state 53

    3 block: block . statement
   11 if: IF_CONDITION bool_exp IF_STATEMENTS NEWLINE block . optional_else IF_END

    IDENTIFIER       shift, and go to state 1
    PRINT            shift, and go to state 2
    WHILE_CONDITION  shift, and go to state 3
    IF_CONDITION     shift, and go to state 4
    ELSE             shift, and go to state 64

    $default  reduce using rule 12 (optional_else)

    statement      go to state 17
    print          go to state 7
    declaration    go to state 8
    while          go to state 9
    if             go to state 10
    optional_else  go to state 65


state 54

   25 expr_op: SUM .

    $default  reduce using rule 25 (expr_op)


state 55

   26 expr_op: SUBTRACT .

    $default  reduce using rule 26 (expr_op)


state 56

   24 expression: expression expr_op . term

    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    PLUS        shift, and go to state 37
    MINUS       shift, and go to state 38
    NOT         shift, and go to state 39
    INPUT       shift, and go to state 40

    term       go to state 66
    factor     go to state 43
    factor_op  go to state 44
    sequence   go to state 45


state 57

   29 term_op: MULTIPLY .

    $default  reduce using rule 29 (term_op)


state 58

   30 term_op: DIVIDE .

    $default  reduce using rule 30 (term_op)


state 59

   28 term: term term_op . factor

    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 36
    PLUS        shift, and go to state 37
    MINUS       shift, and go to state 38
    NOT         shift, and go to state 39
    INPUT       shift, and go to state 40

    factor     go to state 67
    factor_op  go to state 44
    sequence   go to state 45


state 60

   33 factor: factor_op factor .

    $default  reduce using rule 33 (factor)


state 61

   39 sequence: sequence NUMBER .

    $default  reduce using rule 39 (sequence)


state 62

   19 rel_exp: rel_exp rel_op expression .
   24 expression: expression . expr_op term

    SUM       shift, and go to state 54
    SUBTRACT  shift, and go to state 55

    $default  reduce using rule 19 (rel_exp)

    expr_op  go to state 56


state 63

   10 while: WHILE_CONDITION bool_exp WHILE_STATEMENTS NEWLINE block WHILE_END .

    $default  reduce using rule 10 (while)


state 64

   13 optional_else: ELSE . NEWLINE block

    NEWLINE  shift, and go to state 68


state 65

   11 if: IF_CONDITION bool_exp IF_STATEMENTS NEWLINE block optional_else . IF_END

    IF_END  shift, and go to state 69


state 66

   24 expression: expression expr_op term .
   28 term: term . term_op factor

    MULTIPLY  shift, and go to state 57
    DIVIDE    shift, and go to state 58

    $default  reduce using rule 24 (expression)

    term_op  go to state 59


state 67

   28 term: term term_op factor .

    $default  reduce using rule 28 (term)


state 68

   13 optional_else: ELSE NEWLINE . block

    IDENTIFIER       shift, and go to state 1
    PRINT            shift, and go to state 2
    WHILE_CONDITION  shift, and go to state 3
    IF_CONDITION     shift, and go to state 4

    IDENTIFIER       [reduce using rule 1 (block)]
    PRINT            [reduce using rule 1 (block)]
    WHILE_CONDITION  [reduce using rule 1 (block)]
    IF_CONDITION     [reduce using rule 1 (block)]
    $default         reduce using rule 1 (block)

    block        go to state 70
    statement    go to state 6
    print        go to state 7
    declaration  go to state 8
    while        go to state 9
    if           go to state 10


state 69

   11 if: IF_CONDITION bool_exp IF_STATEMENTS NEWLINE block optional_else IF_END .

    $default  reduce using rule 11 (if)


state 70

    3 block: block . statement
   13 optional_else: ELSE NEWLINE block .

    IDENTIFIER       shift, and go to state 1
    PRINT            shift, and go to state 2
    WHILE_CONDITION  shift, and go to state 3
    IF_CONDITION     shift, and go to state 4

    $default  reduce using rule 13 (optional_else)

    statement    go to state 17
    print        go to state 7
    declaration  go to state 8
    while        go to state 9
    if           go to state 10
